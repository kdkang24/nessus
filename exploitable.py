import requests
import copy


baseurl = "https://cloud.tenable.com"

#Target groups were deprecated in Feb 2022
#Tenable now recommends using tags

#Documentation for target groups and their IDs
# https://developer.tenable.com/reference/target-groups-list
# Target group name should be key, its ID is the value
target_groups =  {
                  'EXAMPLE_TARGET_GROUP_1': 101,
                  'EXAMPLE_TARGET_GROUP_2': 102,
                  'EXAMPLE_TARGET_GROUP_3': 103
                 }

access_key = '<TENABLE_ACCESS_KEY>'
secret_key = '<TENABLE_SECRET_KEY>'

headers ={
    "Accept": "application/json",
    "X-ApiKeys": f'accessKey={access_key};secretKey={secret_key}'

    }

glob_querystring = {
        "date_range":"30",
        "filter.0.filter":"plugin.attributes.exploited_by_malware",
        "filter.0.quality":"eq",
        "filter.0.value":"true",
        "severity":"high"
    }



def get_exploitable_vulns():
    """Returns dict object with list of all exploitable vulnerabilities of High severity"""
    endpoint = f"{baseurl}/workbenches/vulnerabilities"


    response = requests.get(endpoint, headers=headers, params=glob_querystring).json()
    
    return response


def filter_vulns(vulns):
    """Take the object returned by get_exploitable_vulns() as input, returns a list of dictionaries containing vuln names and ids"""
    vulns_complete = []
    for i in range(len(vulns['vulnerabilities'])):
        vuln_info = {}
        vuln_info['name'] = vulns['vulnerabilities'][i]['plugin_name']
        vuln_info['id'] = vulns['vulnerabilities'][i]['plugin_id']
        vulns_complete.append(vuln_info)

    return vulns_complete


def get_vuln_details(vulns_complete):
    """Takes the object returned by the filter_vulns() function and adds a link to more detailed info as well as the solution"""
    for vuln in vulns_complete:
       endpoint = f"{baseurl}/workbenches/vulnerabilities/{vuln['id']}/info"
       response = requests.get(endpoint, headers=headers)
       response = response.json()
       vuln['solution'] = response['info']['solution']
       vuln['see_also'] = response['info']['see_also'][0]
    
    return vulns_complete


def get_vuln_output(vulns_complete):
    """Takes the object returned by the get_vuln_details() function and adds info regarding required updates"""
    for vuln in vulns_complete:
        endpoint = f"{baseurl}/workbenches/vulnerabilities/{vuln['id']}/outputs"
        response = requests.get(endpoint, headers=headers)
        response = response.json()
        vuln['details'] = response['outputs'][0]['plugin_output']
    
    return vulns_complete
    

def by_target_group(vulns_complete):
    """Takes the object returned by filter_vulns() as input, returns a list of objects that can be mapped directly to Zendesk tickets"""
    tickets = []
    for group in target_groups:
            for vuln in vulns_complete:                
                endpoint = f"{baseurl}/workbenches/assets/vulnerabilities"
                vuln['severity'] = glob_querystring['severity']
                filters = ''
                for key, value in glob_querystring.items():
                    
                    if 'filter' in key:
                        filters = filters + value + ', '

                vuln['filters'] = filters
                
                        
                querystring = {
                    "date_range":"45",
                    "filter.0.filter":"plugin.id",
                    "filter.0.quality":"eq",
                    "filter.0.value": vuln['id'],
                    "filter.search_type":"and",
                    "filter.1.filter": "target_group",
                    "filter.1.quality": "eq",
                    "filter.1.value": target_groups[group]
                }

                response = requests.get(endpoint, headers=headers, params=querystring)
                response = response.json()
                
                if len(response['assets']) > 0:
                    new_vuln = copy.deepcopy(vuln)    
                    new_vuln['target_group'] = group
                    new_vuln['assets'] = []
                    for i in range(len(response['assets'])):
                        fqdn = {'fqdn': response['assets'][i]['fqdn']}
                        ip = {'ip': response['assets'][i]['ipv4']}
                        new_vuln['assets'].append(fqdn)
                        new_vuln['assets'].append(ip)
                    tickets.append(new_vuln)

    return tickets


def by_aws_tags(vulns_complete):
    """Takes the object returned by filter_vulns() as input, returns a list of objects that can be mapped directly to Zendesk tickets"""
    #This is specifically for the AWS scans, which use AWS connectors and cannot be put in target groups
    business_units = ["AWS_ACCOUNT_1_NAME", "AWS_ACCOUNT_2_NAME", "AWS_ACCOUNT_3_NAME"]
    aws_tickets = []

    for unit in business_units:
        for vuln in vulns_complete:
            endpoint = f"{baseurl}/workbenches/assets/vulnerabilities"

            vuln['severity'] = glob_querystring['severity']
            filters = ''
            for key, value in glob_querystring.items():
                
                if 'filter' in key:
                    filters = filters + value + ', '

            vuln['filters'] = filters
            querystring = {
                            "date_range":"60",
                            "filter.0.filter":"plugin.id",
                            "filter.0.quality":"eq",
                            "filter.0.value": vuln['id'],
                            "filter.search_type":"and",
                            "filter.1.filter": "tag.AWS",
                            "filter.1.quality": "set-has",
                            "filter.1.value": unit
                        }

            response = requests.get(endpoint, headers=headers, params=querystring)
            response = response.json()

            if len(response['assets']) > 0:
                new_vuln = copy.deepcopy(vuln)    
                new_vuln['target_group'] = f"AWS - {unit}"
                new_vuln['assets'] = []
                for i in range(len(response['assets'])):
                    #Changed value for FQDN to netbios_name for AWS assets - this offers more useful info for AWS specifically
                    fqdn = {'fqdn': response['assets'][i]['netbios_name']}
                    ip = {'ip': response['assets'][i]['ipv4']}
                    new_vuln['assets'].append(fqdn)
                    new_vuln['assets'].append(ip)
                aws_tickets.append(new_vuln)

    return aws_tickets



def run_exploitable():
    vulns = get_exploitable_vulns()
    vulns_complete = filter_vulns(vulns)
    vulns_complete = get_vuln_details(vulns_complete)
    vulns_complete = get_vuln_output(vulns_complete)
    tickets_complete = by_target_group(vulns_complete)
    tickets_complete.extend(by_aws_tags(vulns_complete))


    return tickets_complete
    


